diff --git a/src/inspector/v8-console.cc b/src/inspector/v8-console.cc
index f608d678505e..882be746310d 100644
--- a/src/inspector/v8-console.cc
+++ b/src/inspector/v8-console.cc
@@ -70,37 +70,37 @@ class ConsoleHelper {
 
   void reportCall(ConsoleAPIType type) {
     if (!m_info.Length()) return;
     arguments.reserve(m_info.Length());
     for (int i = 0; i < m_info.Length(); ++i) arguments.push_back(m_info[i]);
   }
 
   void reportCallWithDefaultArgument(ConsoleAPIType type,
                                      const String16& message) {
     arguments.reserve(m_info.Length());
     for (int i = 0; i < m_info.Length(); ++i) arguments.push_back(m_info[i]);
     if (!m_info.Length()) arguments.push_back(toV8String(m_isolate, message));
   }
 
   void reportCallAndReplaceFirstArgument(ConsoleAPIType type,
                                          const String16& message) {
     arguments.push_back(toV8String(m_isolate, message));
     for (int i = 1; i < m_info.Length(); ++i) arguments.push_back(m_info[i]);
   }
 
   void reportCallWithArgument(ConsoleAPIType type, const String16& message) {
-    auto arguments =
-        v8::to_array<v8::Local<v8::Value>>({toV8String(m_isolate, message)});
+    auto arguments =
+        v8::to_array<v8::Local<v8::Value>>({toV8String(m_isolate, message)->Value()});
     reportCall(type, arguments);
   }
 
   void reportCall(ConsoleAPIType type,
     if (!m_groupId) return;
     std::unique_ptr<V8ConsoleMessage> message =
         V8ConsoleMessage::createForConsoleAPI(
@@ -116,8 +116,8 @@ class ConsoleHelper {
                                                                  id)) {
       return;
     }
-    auto arguments =
-        v8::to_array<v8::Local<v8::Value>>({toV8String(m_isolate, message)});
+    auto arguments =
+        v8::to_array<v8::Local<v8::Value>>({toV8String(m_isolate, message)->Value()});
     reportCall(ConsoleAPIType::kWarning, arguments);
   }
 
