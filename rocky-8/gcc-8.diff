diff -aurp v8-orig/src/base/logging.h v8/src/base/logging.h
--- v8-orig/src/base/logging.h   2025-08-23 10:37:17
+++ v8/src/base/logging.h  2025-08-23 10:38:18
@@ -61,7 +61,7 @@ constexpr const char* kUnreachableCodeMessage = "unrea
 }  // namespace v8::base
 
 #define UNIMPLEMENTED() FATAL(::v8::base::kUnimplementedCodeMessage)
-#define UNREACHABLE() FATAL(::v8::base::kUnreachableCodeMessage)
+#define UNREACHABLE() abort()
 // g++ versions <= 8 cannot use UNREACHABLE() in a constexpr function.
 // TODO(miladfarca): Remove once all compilers handle this properly.
 #if defined(__GNUC__) && !defined(__clang__) && (__GNUC__ <= 8)
diff -aurp v8-orig/src/compiler/turboshaft/operations.h v8/src/compiler/turboshaft/operations.h
--- v8-orig/src/compiler/turboshaft/operations.h   2025-08-23 10:37:16
+++ v8/src/compiler/turboshaft/operations.h  2025-08-23 10:37:29
@@ -6564,7 +6564,7 @@ struct AnyConvertExternOp : FixedArityOperationT<1, An
 
   void Validate(const Graph& graph) const {}
 
-  auto options() const { return std::tuple(); }
+  auto options() const { return std::tuple{}; }
 };
 
 struct ExternConvertAnyOp : FixedArityOperationT<1, ExternConvertAnyOp> {
@@ -6585,7 +6585,7 @@ struct ExternConvertAnyOp : FixedArityOperationT<1, Ex
 
   void Validate(const Graph& graph) const {}
 
-  auto options() const { return std::tuple(); }
+  auto options() const { return std::tuple{}; }
 };
 
 struct StructGetOp : FixedArityOperationT<1, StructGetOp> {

diff --git a/src/inspector/v8-console.cc b/src/inspector/v8-console.cc
index f608d678505e..882be746310d 100644
--- v8-orig/src/inspector/v8-console.cc
+++ v8/src/inspector/v8-console.cc
@@ -94,8 +94,8 @@     reportCall(type, {arguments.begin(), arguments.end()});
   }
 
   void reportCallWithArgument(ConsoleAPIType type, const String16& message) {
-    auto arguments =
-        v8::to_array<v8::Local<v8::Value>>({toV8String(m_isolate, message)});
+    std::array<v8::Local<v8::Value>, 1> arguments =
+        {toV8String(m_isolate, message)};
     reportCall(type, arguments);
   }
 
@@ -116,8 +116,8 @@ class ConsoleHelper {
                                                                  id)) {
       return;
     }
-    auto arguments =
-        v8::to_array<v8::Local<v8::Value>>({toV8String(m_isolate, message)});
+    std::array<v8::Local<v8::Value>, 1> arguments =
+        {toV8String(m_isolate, message)};
     reportCall(ConsoleAPIType::kWarning, arguments);
   }
 